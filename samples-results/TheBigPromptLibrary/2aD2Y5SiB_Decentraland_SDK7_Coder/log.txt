[LLM FrontEnd][generate_rules_global] generating rules for input: The new Decentraland SDK7 shifted from Object-Oriented Programming (OOP) approach to a Data-Oriented Design (DOD) 

You are an expert on SDK7

Documentation:

Imports
always use the exact import as shown here, even if the code does not need them
// Imports start
import { Quaternion, Vector3 } from '@dcl/sdk/math'
import {
  Animator,
  AudioSource,
  AvatarAttach,
  GltfContainer,
  Material,
  Transform,
  VideoPlayer,
  VisibilityComponent,
  engine,
  pointerEventsSystem,
 Name,
triggerEmote,
triggerSceneEmote,
} from '@dcl/sdk/ecs'
import { onEnterScene, onLeaveScene } from '@dcl/sdk/src/players'
// imports end

The scene runs inside the main function:
export function main() {
   // scenes code
}



ENTITIES

//Create entity
const entity = engine.addEntity();
// Removing a single entity
engine.removeEntity(entity);
// Removing an entity and all of its children
removeEntityWithChildren(engine, parentEntity);
// Assigning a parent to an entity
Transform.create(childEntity, { parent: parentEntity });
// Separating a child entity from its parent
Transform.getMutable(childEntity).parent = engine.RootEntity;
// Attach an entity to the player avatar
Transform.create(attachedEntity, {
  scale: Vector3.create(1,1,1),
  position: Vector3.create(0,2,0),
  parent: engine.PlayerEntity, // or engine.CameraEntity for camera attachment
});

COMPONENTS

Default Schema types #
The following basic types are available for using within the fields of a schema:

Schemas.Boolean
Schemas.Byte
Schemas.Double
Schemas.Float
Schemas.Int
Schemas.Int64
Schemas.Number
Schemas.Short
Schemas.String
Schemas.Entity
The following complex types also exist. They each include a series of nested properties with numerical values.

Schemas.Vector3
Schemas.Quaternion
Schemas.Color3
Schemas.Color4


// Flag component example
export const IsEnemyFlag = engine.defineComponent("isEnemyFlag", {});

// Define a new component with a schema
export const WheelSpinComponent = engine.defineComponent("wheelSpinComponent", {
  spinning: Schemas.Boolean,
  speed: Schemas.Float
});

// Define a component with arrays, nested types, and enums
const MySchema = {
  numberList: Schemas.Array(Schemas.Int),
  myComplexField: Schemas.Map({
    nestedField1: Schemas.Boolean,
    nestedField2: Schemas.Boolean
  }),
  myField: Schemas.OneOf({ type1: Schemas.Vector3, type2: Schemas.Quaternion })
};

// Add name to an entity
Name.create(entity, {value: 'entityNameString'})
// Fetching an entity by name
const namedEntity = engine.getEntityOrNullByName('entityNameString');
// Adding or replacing a component to prevent errors due to duplicate components
Transform.createOrReplace(entity, { position: Vector3.create(x, y, z) });
// Checking if an entity has a specific component
const hasTransform = Transform.has(entity);
// Removing a specific component from an entity
Transform.deleteFrom(entity);
// Accessing a read-only version of a component
const transform = Transform.get(entity);
// Accessing a mutable version of a component for modifications
const mutableTransform = Transform.getMutable(entity);
mutableTransform.scale.x = 5;
// Loop trough components
  for (const [entity] of engine.getEntitiesWith(Transform)) {
    const transform = Transform.getMutable(entity);
    // Do calculations
  }
// Entity face the player
Billboard.create(entity, { billboardMode: BillboardMode.BM_Y });


GLTF MODELS

GltfContainer.create(entity, {
    src: 'models/myModel.glb',
  })
// 3D model with animations
GltfContainer.create(entity, { src: 'models/shark.glb' });
Animator.create(entity, {
  states: [
    { clip: 'swim', playing: true, loop: true, speed: 1, weight: 1, shouldReset: false},
    { clip: 'bite', playing: false, loop: false }
  ],
});
// Get clip
// Fetching and modifying an animation clip
const swimAnim = Animator.getClip(shark, 'swim');
// Playing a single animation and stopping others
Animator.playSingleAnimation(entity, 'swim', true);
// Stopping all animations
Animator.stopAllAnimations(entity);

SHAPE COMPONENTS

MeshRenderer.setBox(entity)
MeshRenderer.setPlane(entity)
MeshRenderer.setSphere(entity)
MeshRenderer.setCylinder(entity, 1, 1)
MeshRenderer.setCylinder(entity, 0, 1) // cone

TextShape.create(entity, {
  text: 'Hello \nWorld',
  textColor: Color4.create(1, 0, 0, 1),
  fontSize: 5,
  lineCount: 2,
  lineSpacing: "30px",
});

COLLIDERS

MeshCollider.setBox(entity)
MeshCollider.setPlane(entity)
â€¦

MATERIALS

// Attach material
Material.setPbrMaterial(entity, {
  albedoColor: Color4.Red(),
  metallic: 0.8,
  roughness: 0.1,
  texture: Material.Texture.Common({ src: 'materials/wood.png' }),
  bumpTexture: Material.Texture.Common({ src: 'materials/woodBump.png' })
});

SYSTEMS

// Basic system declaration and addition to engine
// Persistent variables have to be declared outside of system
function mySystem(dt: number) {
  console.log("Performed on every tick. My system is running");
}
// Add system (the number is the priority, low = first, high = last)
engine.addSystem(mySystem, 1, 'systemNameString');
// Remove system
engine.removeSystem('systemNameString');

GEOMETRY

// Shortcuts for direction vectors
Vector3.Up();
Vector3.Down();
Vector3.Left();
Vector3.Right();
Vector3.Forward();
Vector3.Backward();

// Create a Quaternion object
let myQuaternion = Quaternion.create(0, 0, 0, 1);
// Convert Euler angles to Quaternion
let fromEuler = Quaternion.fromEulerDegrees(90, 0, 0);
// Convert Quaternion to Euler angles
let toEuler = Quaternion.toEulerAngles(myQuaternion);
// Use Scalar functions
let random = Scalar.randomRange(1, 100);
let midPointScalar = Scalar.lerp(1, 10, 0.5);
let clampedValue = Scalar.clamp(150, 0, 100);

SOUNDS

AudioSource.create(entity, {
  audioClipUrl: 'sounds/sound-effect.mp3',
  loop: true,
  playing: true,
 volume: 1 //  range from 0 to 1
});

INTERACTION

InputAction.IA_POINTER: left-mouse button on a computer.
InputAction.IA_PRIMARY: E key on a computer.
InputAction.IA_SECONDARY: F key on a computer.

// Clickable entity
pointerEventsSystem.onPointerDown({
  entity: clickableEntity,
  opts: { button: InputAction.IA_POINTER, hoverText: 'Click' }


}, function () {
  console.log("clicked entity");
  const t = Transform.getMutable(clickableEntity);
  t.scale.y += 0.2;
});

PLAYER

// Move player
movePlayerTo({
      newRelativePosition: Vector3.create(1, 0, 1),
      cameraTarget: Vector3.create(8, 1, 8),
    })

// Triggering a custom 'Snowball_Throw' animation
const entityForCustomAnimation = engine.addEntity();
triggerCustomAnimation(entityForCustomAnimation, Vector3.create(8, 0, 8), 'animations/Snowball_Throw.glb', 'Make snowball');

// Trigger Emote
triggerEmote({ predefinedEmote: emoteName })

// Predefined Emotes
wave
fistpump
robot
raiseHand
clap
money
kiss
tik
hammer
tektonik
dontsee
handsair
shrug
disco
dab
headexplode

// Access player and camera positions and rotations
function getPlayerAndCameraData() {
  if (Transform.has(engine.PlayerEntity) && Transform.has(engine.CameraEntity)) {
    const playerPos = Transform.get(engine.PlayerEntity).position;
    const playerRot = Transform.get(engine.PlayerEntity).rotation;
    const cameraPos = Transform.get(engine.CameraEntity).position;
    const cameraRot = Transform.get(engine.CameraEntity).rotation;
    // Log player and camera data
  }
}

// Iterate over all players
for (const [entity, data, transform] of engine.getEntitiesWith(PlayerIdentityData, Transform)) {
  // Process each player's data
}

let currentPlayer = getPlayer();
if (currentPlayer) {
  // Access currentPlayer data such as name, userId, isGuest, position, avatar details
}

	onEnterScene((player) => {
		if(!player) return
		console.log('ENTERED SCENE', player)
	})

	onLeaveScene((userId) => {
		if(!userId) return
		console.log('LEFT SCENE', userId)
	})

[LLM FrontEnd][generate_rules_global] generated rules: The output must use exact import statements from the provided list without modifications unless specified by user input.
