script({ system: ["system", "system.files", "system.fs_read_file"]})
$`

The MESSAGES sections contains a list of prompty template filename and an example of generated chatgpt message.

For each prompty template file in the messages section,

- update the prompty template frontmatter "sample" section with the values found in the message examples

`

$`
## MESSAGES

messages for src/prompts/rules_global.prompty:
\`\`\`json
[{'role': 'system', 'content': 'You are an expert in analyzing chatbot description and extracting rules and constrains for output validation. You are given a description for a chatbot. It describes the interaction between the user and the chatbot that helps the user achieve their goals. Sometimes the description will contain examples. DO NOT provide rules that only apply for those examples. Generalize the rules so that they will apply for other possible inputs. Ensure the rules are clear, specific and very verbose such that they define everything in the rules based on the provided description. Provide the rules as meaningful independent sentences that can be easily validated by just seeing the output and have all the required information for performing the check. Make sure every entity in the rules are provided with a definition and all rules must only be about what the output is and should not contain any information about how the output should be generated.\n\nOnly output all the rules related to the output or response generated by the chatbot based on the given description, one in each line and nothing else without any bullets or numbering. Do not make any assumptions.\n'}, {'role': 'user', 'content': 'System prompt: Write a poem.'}]
\`\`\`

messages for src/prompts/input_spec.prompty:
\`\`\`json
[{'role': 'system', 'content': "You are an expert in analyzing chatbot functionalities and identifying the requirements for their inputs. Given a description of a chatbot's capabilities, your task is to specifically extract and list the rules and constraints that will guide the creation of valid inputs. Your response should focus solely on input requirements and ignore any details related to output generation or other functionalities. Start with describing what the input is, is it a question related to programming or is it a math problem or something more complex, then move to describing the restrictions for the input.\n\nIf the chatbot description handles a corner case, for example if the description says ignore all the greetings, it means that a greeting is a valid input but the chatbot is handling it in a special way which makes it a part of the input domain and there must not be a rules against it.\n\nIf the input is a file, assume the content inside that file is the input and mention the content in your result and generate input specification for that content only. Do not mention the file as input.\n\nThis input specification will be used for generating tests for the chatbot. Please make sure to only think about the input and not the output or how will the chatbot respond to the input. If it a possible input, it is a valid input irrespective of the output or the chatbot description.\n\nPlease format your response as follows:\n- List each input rule as a clear, independent sentence.\n- Ensure each rule directly relates to the types of inputs the chatbot can accept.\n- Avoid mentioning output details or any assumptions beyond the provided description.\n- Do not add unnecessary details, generated max two rules for each compenent of the input.\n\nFocus only on what types of inputs can be given to the chatbot based on its description, output each input rule in a line without any bullets, and nothing else."}, {'role': 'user', 'content': 'Chatbot description: Write a poem.'}]
\`\`\`

messages for src/prompts/inverse_rule.prompty:
\`\`\`json
[{'role': 'system', 'content': 'Given a list of rules provided by the user, generate another list of rules which contradicts the given rules semantically. Generate one inversed rule for each given rule in the given list. Come up with smart edge case scenarios. Please ensure that each generated rule is only in a single line. Output only the generated rules and nothing else'}, {'role': 'user', 'content': 'The output must be in the form of a poem, which is a piece of writing that typically uses rhythmic and metaphorical language.\nThe poem must consist of multiple lines.\nEach line in the poem should contribute to an overarching theme or emotion.\nThe poem may have a rhyme scheme, but it is not mandatory unless specifically requested.\nThe language used in the poem should be imaginative and could include similes, metaphors, or other poetic devices.\nThe poem should evoke emotion or imagery, providing a sensory experience for the reader.\nThe length of the poem can vary, but it should be sufficient to convey the intended theme or message.\nThe poem should have coherence and flow, ensuring that it is understandable and has a logical progression.\nThe poem can follow a specific structure, like a haiku or sonnet, only if explicitly requested. Otherwise, flexibility in structure is allowed.\nThe tone of the poem should be consistent unless a shift serves the thematic purpose.\nThe poem should avoid complex jargon, ensuring accessibility to a wide audience unless complex language is part of the requested style.\nThe poem should not include explicit or offensive content, ensuring it is appropriate for all audiences.\nIf specific poetic constraints (such as style, theme, or form) are provided by the user, the poem should adhere to these constraints while still maintaining creativity.'}]
\`\`\`

messages for src/prompts/test.prompty:
\`\`\`json
[{'role': 'system', 'content': 'You are tasked with developing multiple test cases for an software, given its functional and input specification and a list of rules as input. For each rule, you must create 1 test cases. These test cases must be designed to validate whether the software\'s outputs correctly adhere to a particular rule. These tests must be well defined based on the input specifications.\n\nStart with first understanding what is a input for the software using the given input specification. Understand what are the different components of a valid input, what are the sytax and sematics related constraints. A good test must always be a valid input meeting the requirements from the given input specification.\n\nUse the following input specification to understand valid inputs and generate good tests: [\'The input must be a prompt related to poetry.  \', \'The input can include specific themes, styles, or subjects for the poem.\']\n\nUse the following functional specification of the software to generate the test cases: Write a poem.\n\nGuidelines for generating test cases:\n- Analyze the input specifications to understand the valid input formats, components of the input and scenarios for the software.\n- If the test case have multiple components, try to use all the components in the test case and tag them with their name, like, component name: value\n- Develop 1 test cases for each rule provided in the list.\n- Each test case must be crafted to rigorously assess whether the software\'s output meets the stipulated rule based on the inputs that conform to the provided input specification.\n- Use valid and realistic input scenarios that fully comply with the input specifications and are relevant to the rule being tested.\n- Specify clearly in each test case the input given to the software and the expected output or behavior that demonstrates adherence to the rule.\n- Broadly cover a range of scenarios, including boundary cases, typical cases, and edge cases, to thoroughly evaluate the software\'s adherence to the rule under various conditions.\n- Never generate similar or redundant test cases\n\nEach test case should adhere to principles of good software testing practices, emphasizing coverage, specificity and independence. Critically assess potential weaknesses in the software\'s handling of inputs based on the rule and focus on creating diverse test cases that effectively challenge the software\'s capabilities.\n\nFormat your response in a structured CSV format as follows:\n- "Rule ID": Identifier for the rule being tested.\n- "Test ID": Sequential identifier for each test case under a rule.\n- "Test Input": Detailed input provided to the software.\n- "Expected Output": Output or behavior expected from the software to affirm rule adherence.\n- "Reasoning": Brief explanation of why this test case is relevant and contributes to robust testing of the rule. List the input specification that this test case does not follow.\n\nExample CSV layout:\nRule ID, Test ID, Test Input, Expected Output, Reasoning\n1, 1, "input based on rule 1 scenario 1", "expected outcome demonstrating rule adherence", "Explains the relevance and effectiveness of the test and how it follows the input specification"\n1, 2, "input based on rule 1 scenario 2, examples", "expected response confirming rule", "Illustrates how inputs challenge the software and ensure compliance and how is a valid test case based on input specification"\n\nOnly output the test cases in the specified CSV format and nothing else. Please make sure that the CSV generated is well formed, only have five columns and each value in a these columns must only have commas inside quoted value else they will be counted as a new column. Do not wrap the output in any additional text or formatting like triple backticks or quotes.'}, {'role': 'user', 'content': 'List of Rules: The output must be in the form of a poem, which is a piece of writing that typically uses rhythmic and metaphorical language.\nThe poem must consist of multiple lines.\nEach line in the poem should contribute to an overarching theme or emotion.\nThe poem may have a rhyme scheme, but it is not mandatory unless specifically requested.\nThe language used in the poem should be imaginative and could include similes, metaphors, or other poetic devices.\nThe poem should evoke emotion or imagery, providing a sensory experience for the reader.\nThe length of the poem can vary, but it should be sufficient to convey the intended theme or message.\nThe poem should have coherence and flow, ensuring that it is understandable and has a logical progression.\nThe poem can follow a specific structure, like a haiku or sonnet, only if explicitly requested. Otherwise, flexibility in structure is allowed.\nThe tone of the poem should be consistent unless a shift serves the thematic purpose.\nThe poem should avoid complex jargon, ensuring accessibility to a wide audience unless complex language is part of the requested style.\nThe poem should not include explicit or offensive content, ensuring it is appropriate for all audiences.\nIf specific poetic constraints (such as style, theme, or form) are provided by the user, the poem should adhere to these constraints while still maintaining creativity.\nThe output must lack any poetic elements or structures, avoiding any use of rhythmic or metaphorical language.\nThe poem must consist of a single line, defying the idea of multiple lines.\nEach line in the poem should withdraw from contributing to any overarching theme or emotion.\nThe poem must strictly adhere to a rhyme scheme, contrasting the notion of flexibility.\nLanguage in the poem must be literal, avoiding any imaginative expressions like similes or metaphors.\nThe poem should suppress any emotion or imagery, blocking a sensory experience for the reader.\nThe length of the poem must be brief, insufficient to convey any intended theme or message.\nThe poem should lack coherence and flow, ensuring it is perplexing and has an illogical progression.\nThe poem must not follow any specific structure, like a haiku or sonnet, disregarding any explicit requests.\nThe tone of the poem should be inconsistent, unless uniformity obstructs the thematic purpose.\nThe poem must include complex jargon, limiting accessibility to a wide audience unless simplicity is part of the requested style.\nThe poem must include explicit or offensive content, ignoring the criterion of being appropriate for all audiences.\nIf specific poetic constraints (such as style, theme, or form) are requested by the user, the poem should ignore these constraints entirely.'}]
\`\`\`
`