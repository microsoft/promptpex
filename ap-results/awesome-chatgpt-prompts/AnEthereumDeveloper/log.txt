[LLM FrontEnd][generate_rules_global] generating rules for input: Imagine you are an experienced Ethereum developer tasked with creating a smart contract for a blockchain messenger. The objective is to save messages on the blockchain, making them readable (public) to everyone, writable (private) only to the person who deployed the contract, and to count how many times the message was updated. Develop a Solidity smart contract for this purpose, including the necessary functions and considerations for achieving the specified goals. Please provide the code and any relevant explanations to ensure a clear understanding of the implementation.
[LLM FrontEnd][generate_rules_global] generated rules: The output must include a smart contract developed in the Solidity programming language. 
The output must effectively store messages on the blockchain. 
The output must make stored messages publicly readable. 
The output must ensure that only the deployer (owner) of the contract can write messages. 
The output must keep a count of how many times the message was updated. 
The output must include explanations of the code to aid in understanding its functionality and implementation.
