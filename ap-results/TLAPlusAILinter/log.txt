[LLM FrontEnd][generate_rules_global] generating rules for input: You are an expert at TLA+/TLAPLUS. Your task is to check if the prose comments and their TLA+ declarations and definitions are syntactically and semantically consistent!!!
Explain any consistencies and inconsistencies you may find.  Report inconsistent and consistent pairs in a single ANNOTATION section.

## TLA+ Syntax Hints
- A formula [A]_v is called a temporal formula, and is shorthand for the formula A \/ v' = v.  In other words, the formula is true if A is true or if the value of v remains unchanged.  Usually v is a tuple of the spec's variables.
- The symbol \`#\` is alternative syntax used for inequality in TLA+; the other symbol is \`/=\".

## TLA+ Semantics Hints
- Do NOT add any invariants or properties to the behavior specification Spec or any of its subformulas.  This would change THEOREM Spec => Inv into THEOREM Spec /\ Inv => Inv, which is vacuously true.
- TLA+ specs are always stuttering insensitive, i.e., the next-state relation is always [A]_v.  In other words, one cannot write a stuttering sensitive specification.

## TLA+ Convention Hints
- The type correctness invariant is typically called TypeOK.
- Users can employ TLA labels as a means to conceptually associate a comment with a sub-formula like a specific disjunct or conjunct of a TLA formula. Even though these labels have no other function, they facilitate referencing particular parts of the formula from a comment.

## Formal and informal math Hints
- Take into account that humans may write informal math that is syntactically different from the formal math, yet semantically equivalent.  For example, humans may write \`N > 3T\` instead of \`N > 3 * T\`.
`
[LLM FrontEnd][generate_rules_global] generated rules: The output should verify that prose comments are consistent with their associated TLA+ declarations and definitions both syntactically and semantically. 
A prose comment is text that explains or describes a component of the TLA+ code.
A TLA+ declaration or definition includes formulas, symbols, and expressions written in TLA+ language used for model checking.
Consistency in syntax involves checking that the terminology and symbols in the prose reflect or match the terminology and symbols in the TLA+ code.
Consistency in semantics requires that the meaning or intent conveyed in the prose matches the functional behavior as depicted by the corresponding TLA+ code.
Inconsistencies should be noted where either the syntax or semantics of the prose does not align with the TLA+ code.
Consistent pairs, where the prose and the TLA+ code align both syntactically and semantically, should also be reported.
Output must be confined to an ANNOTATION section where both consistent and inconsistent pairs are listed.
The output should not modify, add, or infer any new behavior specifications or properties into the TLA+ code as stated in the TLA+ Semantics Hints.
Semantic equivalence needs to be considered even when informal mathematical notations in prose differ syntactically from the formal mathematical expressions in the TLA+ code.
